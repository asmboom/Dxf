// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf.Tables
{

    public partial class DxfAppIdTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.AppId; } }
        public List<DxfAppId> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfAppIdTable()
        {
            Items = new List<DxfAppId>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfAppIdTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.AppIdText)
                {
                    var item = DxfAppId.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfBlockRecordTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.BlockRecord; } }
        public List<DxfBlockRecord> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfBlockRecordTable()
        {
            Items = new List<DxfBlockRecord>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfBlockRecordTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.BlockRecordText)
                {
                    var item = DxfBlockRecord.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfDimStyleTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.DimStyle; } }
        public List<DxfDimStyle> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfDimStyleTable()
        {
            Items = new List<DxfDimStyle>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfDimStyleTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.DimStyleText)
                {
                    var item = DxfDimStyle.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfLayerTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.Layer; } }
        public List<DxfLayer> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfLayerTable()
        {
            Items = new List<DxfLayer>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfLayerTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.LayerText)
                {
                    var item = DxfLayer.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfLTypeTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.LType; } }
        public List<DxfLineType> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfLTypeTable()
        {
            Items = new List<DxfLineType>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfLTypeTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.LTypeText)
                {
                    var item = DxfLineType.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfStyleTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.Style; } }
        public List<DxfStyle> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfStyleTable()
        {
            Items = new List<DxfStyle>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfStyleTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.StyleText)
                {
                    var item = DxfStyle.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfUcsTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.Ucs; } }
        public List<DxfUcs> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfUcsTable()
        {
            Items = new List<DxfUcs>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfUcsTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.UcsText)
                {
                    var item = DxfUcs.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfViewTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.View; } }
        public List<DxfView> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfViewTable()
        {
            Items = new List<DxfView>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfViewTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.ViewText)
                {
                    var item = DxfView.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }

    public partial class DxfViewPortTable : DxfTable
    {
        internal override DxfTableType TableType { get { return DxfTableType.ViewPort; } }
        public List<DxfViewPort> Items { get; private set; }

        protected override IEnumerable<DxfSymbolTableFlags> GetSymbolItems()
        {
            return Items;
        }

        public DxfViewPortTable()
        {
            Items = new List<DxfViewPort>();
        }

        internal static DxfTable ReadFromBuffer(DxfCodePairBufferReader buffer)
        {
            var table = new DxfViewPortTable();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                buffer.Advance();
                if (DxfTablesSection.IsTableEnd(pair))
                {
                    break;
                }

                if (pair.Code == 0 && pair.StringValue == DxfTable.ViewPortText)
                {
                    var item = DxfViewPort.FromBuffer(buffer);
                    table.Items.Add(item);
                }
            }

            return table;
        }
    }
}

namespace IxMilia.Dxf
{

    public partial class DxfAppId : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbRegAppTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.AppId; } }

        // properties

        public DxfXData XData { get; set; }

        public DxfAppId()
            : base()
        {
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfAppId FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfAppId();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfBlockRecord : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbBlockTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.BlockRecord; } }

        // properties
        public uint LayoutHandle { get; set; }
        public DxfUnits InsertionUnits { get; set; }
        public bool Explodability { get; set; }
        public bool Scalability { get; set; }
        private List<string> _bitmapPreviewData { get; set; }

        public DxfXData XData { get; set; }

        public DxfBlockRecord()
            : base()
        {
            LayoutHandle = 0u;
            InsertionUnits = DxfUnits.Unitless;
            Explodability = true;
            Scalability = true;
            _bitmapPreviewData = new List<string>();
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(340, UIntHandle(LayoutHandle)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(70, (short)(InsertionUnits)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(280, BoolShort(Explodability)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(281, BoolShort(Scalability)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.AddRange(_bitmapPreviewData.Select(value => new DxfCodePair(310, value)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfBlockRecord FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfBlockRecord();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 340:
                        item.LayoutHandle = UIntHandle(pair.StringValue);
                        break;
                    case 70:
                        item.InsertionUnits = (DxfUnits)(pair.ShortValue);
                        break;
                    case 280:
                        item.Explodability = BoolShort(pair.ShortValue);
                        break;
                    case 281:
                        item.Scalability = BoolShort(pair.ShortValue);
                        break;
                    case 310:
                        item._bitmapPreviewData.Add((pair.StringValue));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfDimStyle : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbDimStyleTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.DimStyle; } }

        // properties
        public string DimensioningSuffix { get; set; }
        public string AlternateDimensioningSuffix { get; set; }
        public string ArrowBlockName { get; set; }
        public string FirstArrowBlockName { get; set; }
        public string SecondArrowBlockName { get; set; }
        public double DimensioningScaleFactor { get; set; }
        public double DimensioningArrowSize { get; set; }
        public double DimensionExtensionLineOffset { get; set; }
        public double DimensionLineIncrement { get; set; }
        public double DimensionExtensionLineExtension { get; set; }
        public double DimensionDistanceRoundingValue { get; set; }
        public double DimensionLineExtension { get; set; }
        public double DimensionPlusTolerance { get; set; }
        public double DimensionMinusTolerance { get; set; }
        public double DimensioningTextHeight { get; set; }
        public double CenterMarkSize { get; set; }
        public double DimensioningTickSize { get; set; }
        public double AlternateDimensioningScaleFactor { get; set; }
        public double DimensionLinearMeasurementScaleFactor { get; set; }
        public double DimensionVerticalTextPosition { get; set; }
        public double DimensionToleranceDisplacScaleFactor { get; set; }
        public double DimensionLineGap { get; set; }
        public double AlternateDimensioningUnitRounding { get; set; }
        public bool GenerateDimensionTolerances { get; set; }
        public bool GenerateDimensionLimits { get; set; }
        public bool DimensionTextInsideHorizontal { get; set; }
        public bool DimensionTextOutsideHorizontal { get; set; }
        public bool SuppressFirstDimensionExtensionLine { get; set; }
        public bool SuppressSecondDimensionExtensionLine { get; set; }
        public bool TextAboveDimensionLine { get; set; }
        public DxfUnitZeroSuppression DimensionUnitZeroSuppression { get; set; }
        public DxfUnitZeroSuppression DimensionAngleZeroSuppression { get; set; }
        public bool UseAlternateDimensioning { get; set; }
        public short AlternateDimensioningDecimalPlaces { get; set; }
        public bool ForceDimensionLineExtensionsOutsideIfTextExists { get; set; }
        public bool UseSeparateArrowBlocksForDimensions { get; set; }
        public bool ForceDimensionTextInsideExtensions { get; set; }
        public bool SuppressOutsideExtensionDimensionLines { get; set; }
        public DxfColor DimensionLineColor { get; set; }
        public DxfColor DimensionExtensionLineColor { get; set; }
        public DxfColor DimensionTextColor { get; set; }
        public short AngularDimensionPrecision { get; set; }
        public DxfUnitFormat DimensionUnitFormat { get; set; }
        public short DimensionUnitToleranceDecimalPlaces { get; set; }
        public short DimensionToleranceDecimalPlaces { get; set; }
        public DxfUnitFormat AlternateDimensioningUnits { get; set; }
        public short AlternateDimensioningToleranceDecimalPlaces { get; set; }
        public DxfAngleFormat DimensioningAngleFormat { get; set; }
        public short DimensionPrecision { get; set; }
        public DxfNonAngularUnits DimensionNonAngularUnits { get; set; }
        public char DimensionDecimalSeparatorChar { get; set; }
        public DxfDimensionTextMovementRule DimensionTextMovementRule { get; set; }
        public DxfDimensionTextJustification DimensionTextJustification { get; set; }
        public DxfJustification DimensionToleranceVerticalJustification { get; set; }
        public DxfUnitZeroSuppression DimensionToleranceZeroSuppression { get; set; }
        public DxfUnitZeroSuppression AlternateDimensioningZeroSupression { get; set; }
        public DxfUnitZeroSuppression AlternateDimensioningToleranceZeroSupression { get; set; }
        public DxfDimensionFit DimensionTextAndArrowPlacement { get; set; }
        public bool DimensionCursorControlsTextPosition { get; set; }
        public string DimensionTextStyle { get; set; }
        public string DimensionLeaderBlockName { get; set; }
        public DxfLineWeight DimensionLineWeight { get; set; }
        public DxfLineWeight DimensionExtensionLineWeight { get; set; }

        public DxfXData XData { get; set; }

        public DxfDimStyle()
            : base()
        {
            DimensioningSuffix = null;
            AlternateDimensioningSuffix = null;
            ArrowBlockName = null;
            FirstArrowBlockName = null;
            SecondArrowBlockName = null;
            DimensioningScaleFactor = 1.0;
            DimensioningArrowSize = 0.0;
            DimensionExtensionLineOffset = 0.0;
            DimensionLineIncrement = 0.0;
            DimensionExtensionLineExtension = 0.0;
            DimensionDistanceRoundingValue = 0.0;
            DimensionLineExtension = 0.0;
            DimensionPlusTolerance = 0.0;
            DimensionMinusTolerance = 0.0;
            DimensioningTextHeight = 0.0;
            CenterMarkSize = 0.0;
            DimensioningTickSize = 0.0;
            AlternateDimensioningScaleFactor = 1.0;
            DimensionLinearMeasurementScaleFactor = 1.0;
            DimensionVerticalTextPosition = 0.0;
            DimensionToleranceDisplacScaleFactor = 1.0;
            DimensionLineGap = 0.0;
            AlternateDimensioningUnitRounding = 0.0;
            GenerateDimensionTolerances = true;
            GenerateDimensionLimits = true;
            DimensionTextInsideHorizontal = true;
            DimensionTextOutsideHorizontal = true;
            SuppressFirstDimensionExtensionLine = true;
            SuppressSecondDimensionExtensionLine = true;
            TextAboveDimensionLine = true;
            DimensionUnitZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            DimensionAngleZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            UseAlternateDimensioning = false;
            AlternateDimensioningDecimalPlaces = 0;
            ForceDimensionLineExtensionsOutsideIfTextExists = true;
            UseSeparateArrowBlocksForDimensions = false;
            ForceDimensionTextInsideExtensions = false;
            SuppressOutsideExtensionDimensionLines = false;
            DimensionLineColor = null;
            DimensionExtensionLineColor = null;
            DimensionTextColor = null;
            AngularDimensionPrecision = 12;
            DimensionUnitFormat = DxfUnitFormat.Scientific;
            DimensionUnitToleranceDecimalPlaces = 0;
            DimensionToleranceDecimalPlaces = 0;
            AlternateDimensioningUnits = DxfUnitFormat.Scientific;
            AlternateDimensioningToleranceDecimalPlaces = 0;
            DimensioningAngleFormat = DxfAngleFormat.DecimalDegrees;
            DimensionPrecision = 12;
            DimensionNonAngularUnits = DxfNonAngularUnits.Scientific;
            DimensionDecimalSeparatorChar = '.';
            DimensionTextMovementRule = DxfDimensionTextMovementRule.MoveLineWithText;
            DimensionTextJustification = DxfDimensionTextJustification.AboveLineCenter;
            DimensionToleranceVerticalJustification = DxfJustification.Top;
            DimensionToleranceZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            AlternateDimensioningZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            AlternateDimensioningToleranceZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines;
            DimensionCursorControlsTextPosition = true;
            DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines;
            DimensionTextStyle = null;
            DimensionLeaderBlockName = null;
            ArrowBlockName = null;
            FirstArrowBlockName = null;
            SecondArrowBlockName = null;
            DimensionLineWeight = new DxfLineWeight();
            DimensionExtensionLineWeight = new DxfLineWeight();
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(3, (DimensioningSuffix)));
            pairs.Add(new DxfCodePair(4, (AlternateDimensioningSuffix)));
            if (version <= DxfAcadVersion.R14)
            {
                pairs.Add(new DxfCodePair(5, (ArrowBlockName)));
            }

            if (version <= DxfAcadVersion.R14)
            {
                pairs.Add(new DxfCodePair(6, (FirstArrowBlockName)));
            }

            if (version <= DxfAcadVersion.R14)
            {
                pairs.Add(new DxfCodePair(7, (SecondArrowBlockName)));
            }

            pairs.Add(new DxfCodePair(40, (DimensioningScaleFactor)));
            pairs.Add(new DxfCodePair(41, (DimensioningArrowSize)));
            pairs.Add(new DxfCodePair(42, (DimensionExtensionLineOffset)));
            pairs.Add(new DxfCodePair(43, (DimensionLineIncrement)));
            pairs.Add(new DxfCodePair(44, (DimensionExtensionLineExtension)));
            pairs.Add(new DxfCodePair(45, (DimensionDistanceRoundingValue)));
            pairs.Add(new DxfCodePair(46, (DimensionLineExtension)));
            pairs.Add(new DxfCodePair(47, (DimensionPlusTolerance)));
            pairs.Add(new DxfCodePair(48, (DimensionMinusTolerance)));
            pairs.Add(new DxfCodePair(140, (DimensioningTextHeight)));
            pairs.Add(new DxfCodePair(141, (CenterMarkSize)));
            pairs.Add(new DxfCodePair(142, (DimensioningTickSize)));
            pairs.Add(new DxfCodePair(143, (AlternateDimensioningScaleFactor)));
            pairs.Add(new DxfCodePair(144, (DimensionLinearMeasurementScaleFactor)));
            pairs.Add(new DxfCodePair(145, (DimensionVerticalTextPosition)));
            pairs.Add(new DxfCodePair(146, (DimensionToleranceDisplacScaleFactor)));
            pairs.Add(new DxfCodePair(147, (DimensionLineGap)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(148, (AlternateDimensioningUnitRounding)));
            }

            pairs.Add(new DxfCodePair(71, BoolShort(GenerateDimensionTolerances)));
            pairs.Add(new DxfCodePair(72, BoolShort(GenerateDimensionLimits)));
            pairs.Add(new DxfCodePair(73, BoolShort(DimensionTextInsideHorizontal)));
            pairs.Add(new DxfCodePair(74, BoolShort(DimensionTextOutsideHorizontal)));
            pairs.Add(new DxfCodePair(75, BoolShort(SuppressFirstDimensionExtensionLine)));
            pairs.Add(new DxfCodePair(76, BoolShort(SuppressSecondDimensionExtensionLine)));
            pairs.Add(new DxfCodePair(77, BoolShort(TextAboveDimensionLine)));
            pairs.Add(new DxfCodePair(78, (short)(DimensionUnitZeroSuppression)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)(DimensionAngleZeroSuppression)));
            }

            pairs.Add(new DxfCodePair(170, BoolShort(UseAlternateDimensioning)));
            pairs.Add(new DxfCodePair(171, (AlternateDimensioningDecimalPlaces)));
            pairs.Add(new DxfCodePair(172, BoolShort(ForceDimensionLineExtensionsOutsideIfTextExists)));
            pairs.Add(new DxfCodePair(173, BoolShort(UseSeparateArrowBlocksForDimensions)));
            pairs.Add(new DxfCodePair(174, BoolShort(ForceDimensionTextInsideExtensions)));
            pairs.Add(new DxfCodePair(175, BoolShort(SuppressOutsideExtensionDimensionLines)));
            if (DimensionLineColor != null)
            {
                pairs.Add(new DxfCodePair(176, DxfColor.GetRawValue(DimensionLineColor)));
            }

            if (DimensionExtensionLineColor != null)
            {
                pairs.Add(new DxfCodePair(177, DxfColor.GetRawValue(DimensionExtensionLineColor)));
            }

            if (DimensionTextColor != null)
            {
                pairs.Add(new DxfCodePair(178, DxfColor.GetRawValue(DimensionTextColor)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(179, (AngularDimensionPrecision)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(270, (short)(DimensionUnitFormat)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(271, (DimensionUnitToleranceDecimalPlaces)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(272, (DimensionToleranceDecimalPlaces)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(273, (short)(AlternateDimensioningUnits)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(274, (AlternateDimensioningToleranceDecimalPlaces)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(275, (short)(DimensioningAngleFormat)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(276, (DimensionPrecision)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(277, (short)(DimensionNonAngularUnits)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(278, (short)(DimensionDecimalSeparatorChar)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(279, (short)(DimensionTextMovementRule)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(280, (short)(DimensionTextJustification)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(283, (short)(DimensionToleranceVerticalJustification)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(284, (short)(DimensionToleranceZeroSuppression)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(285, (short)(AlternateDimensioningZeroSupression)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(286, (short)(AlternateDimensioningToleranceZeroSupression)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(287, (short)(DimensionTextAndArrowPlacement)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(288, BoolShort(DimensionCursorControlsTextPosition)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(289, (short)(DimensionTextAndArrowPlacement)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(340, (DimensionTextStyle)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(341, (DimensionLeaderBlockName)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(342, (ArrowBlockName)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(343, (FirstArrowBlockName)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(344, (SecondArrowBlockName)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(371, DxfLineWeight.GetRawValue(DimensionLineWeight)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(372, DxfLineWeight.GetRawValue(DimensionExtensionLineWeight)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfDimStyle FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfDimStyle();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 3:
                        item.DimensioningSuffix = (pair.StringValue);
                        break;
                    case 4:
                        item.AlternateDimensioningSuffix = (pair.StringValue);
                        break;
                    case 5:
                        item.ArrowBlockName = (pair.StringValue);
                        break;
                    case 6:
                        item.FirstArrowBlockName = (pair.StringValue);
                        break;
                    case 7:
                        item.SecondArrowBlockName = (pair.StringValue);
                        break;
                    case 40:
                        item.DimensioningScaleFactor = (pair.DoubleValue);
                        break;
                    case 41:
                        item.DimensioningArrowSize = (pair.DoubleValue);
                        break;
                    case 42:
                        item.DimensionExtensionLineOffset = (pair.DoubleValue);
                        break;
                    case 43:
                        item.DimensionLineIncrement = (pair.DoubleValue);
                        break;
                    case 44:
                        item.DimensionExtensionLineExtension = (pair.DoubleValue);
                        break;
                    case 45:
                        item.DimensionDistanceRoundingValue = (pair.DoubleValue);
                        break;
                    case 46:
                        item.DimensionLineExtension = (pair.DoubleValue);
                        break;
                    case 47:
                        item.DimensionPlusTolerance = (pair.DoubleValue);
                        break;
                    case 48:
                        item.DimensionMinusTolerance = (pair.DoubleValue);
                        break;
                    case 140:
                        item.DimensioningTextHeight = (pair.DoubleValue);
                        break;
                    case 141:
                        item.CenterMarkSize = (pair.DoubleValue);
                        break;
                    case 142:
                        item.DimensioningTickSize = (pair.DoubleValue);
                        break;
                    case 143:
                        item.AlternateDimensioningScaleFactor = (pair.DoubleValue);
                        break;
                    case 144:
                        item.DimensionLinearMeasurementScaleFactor = (pair.DoubleValue);
                        break;
                    case 145:
                        item.DimensionVerticalTextPosition = (pair.DoubleValue);
                        break;
                    case 146:
                        item.DimensionToleranceDisplacScaleFactor = (pair.DoubleValue);
                        break;
                    case 147:
                        item.DimensionLineGap = (pair.DoubleValue);
                        break;
                    case 148:
                        item.AlternateDimensioningUnitRounding = (pair.DoubleValue);
                        break;
                    case 71:
                        item.GenerateDimensionTolerances = BoolShort(pair.ShortValue);
                        break;
                    case 72:
                        item.GenerateDimensionLimits = BoolShort(pair.ShortValue);
                        break;
                    case 73:
                        item.DimensionTextInsideHorizontal = BoolShort(pair.ShortValue);
                        break;
                    case 74:
                        item.DimensionTextOutsideHorizontal = BoolShort(pair.ShortValue);
                        break;
                    case 75:
                        item.SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                        break;
                    case 76:
                        item.SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                        break;
                    case 77:
                        item.TextAboveDimensionLine = BoolShort(pair.ShortValue);
                        break;
                    case 78:
                        item.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 79:
                        item.DimensionAngleZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 170:
                        item.UseAlternateDimensioning = BoolShort(pair.ShortValue);
                        break;
                    case 171:
                        item.AlternateDimensioningDecimalPlaces = (pair.ShortValue);
                        break;
                    case 172:
                        item.ForceDimensionLineExtensionsOutsideIfTextExists = BoolShort(pair.ShortValue);
                        break;
                    case 173:
                        item.UseSeparateArrowBlocksForDimensions = BoolShort(pair.ShortValue);
                        break;
                    case 174:
                        item.ForceDimensionTextInsideExtensions = BoolShort(pair.ShortValue);
                        break;
                    case 175:
                        item.SuppressOutsideExtensionDimensionLines = BoolShort(pair.ShortValue);
                        break;
                    case 176:
                        item.DimensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 177:
                        item.DimensionExtensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 178:
                        item.DimensionTextColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 179:
                        item.AngularDimensionPrecision = (pair.ShortValue);
                        break;
                    case 270:
                        item.DimensionUnitFormat = (DxfUnitFormat)(pair.ShortValue);
                        break;
                    case 271:
                        item.DimensionUnitToleranceDecimalPlaces = (pair.ShortValue);
                        break;
                    case 272:
                        item.DimensionToleranceDecimalPlaces = (pair.ShortValue);
                        break;
                    case 273:
                        item.AlternateDimensioningUnits = (DxfUnitFormat)(pair.ShortValue);
                        break;
                    case 274:
                        item.AlternateDimensioningToleranceDecimalPlaces = (pair.ShortValue);
                        break;
                    case 275:
                        item.DimensioningAngleFormat = (DxfAngleFormat)(pair.ShortValue);
                        break;
                    case 276:
                        item.DimensionPrecision = (pair.ShortValue);
                        break;
                    case 277:
                        item.DimensionNonAngularUnits = (DxfNonAngularUnits)(pair.ShortValue);
                        break;
                    case 278:
                        item.DimensionDecimalSeparatorChar = (char)(pair.ShortValue);
                        break;
                    case 279:
                        item.DimensionTextMovementRule = (DxfDimensionTextMovementRule)(pair.ShortValue);
                        break;
                    case 280:
                        item.DimensionTextJustification = (DxfDimensionTextJustification)(pair.ShortValue);
                        break;
                    case 283:
                        item.DimensionToleranceVerticalJustification = (DxfJustification)(pair.ShortValue);
                        break;
                    case 284:
                        item.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 285:
                        item.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 286:
                        item.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                        break;
                    case 287:
                        item.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                        break;
                    case 288:
                        item.DimensionCursorControlsTextPosition = BoolShort(pair.ShortValue);
                        break;
                    case 289:
                        item.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                        break;
                    case 340:
                        item.DimensionTextStyle = (pair.StringValue);
                        break;
                    case 341:
                        item.DimensionLeaderBlockName = (pair.StringValue);
                        break;
                    case 342:
                        item.ArrowBlockName = (pair.StringValue);
                        break;
                    case 343:
                        item.FirstArrowBlockName = (pair.StringValue);
                        break;
                    case 344:
                        item.SecondArrowBlockName = (pair.StringValue);
                        break;
                    case 371:
                        item.DimensionLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                        break;
                    case 372:
                        item.DimensionExtensionLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfLayer : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbLayerTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.Layer; } }

        // backing fields
        private DxfColor _color;

        // properties
        public DxfColor Color { get { return _color; } set { _color = ConvertColor(value); } }
        public string LinetypeName { get; set; }
        public bool IsLayerPlotted { get; set; }
        public DxfLineWeight LineWeight { get; set; }
        public uint PlotStylePointer { get; set; }
        public uint MaterialHandle { get; set; }

        public DxfXData XData { get; set; }

        public DxfLayer()
            : base()
        {
            Color = DxfColor.FromIndex(1);
            LinetypeName = null;
            IsLayerPlotted = true;
            LineWeight = new DxfLineWeight();
            PlotStylePointer = 0u;
            MaterialHandle = 0u;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(62, GetWritableColorValue(Color)));
            pairs.Add(new DxfCodePair(6, (LinetypeName)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(290, (IsLayerPlotted)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(370, DxfLineWeight.GetRawValue(LineWeight)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(390, UIntHandle(PlotStylePointer)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(347, UIntHandle(MaterialHandle)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfLayer FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfLayer();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 62:
                        item.Color = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 6:
                        item.LinetypeName = (pair.StringValue);
                        break;
                    case 290:
                        item.IsLayerPlotted = (pair.BoolValue);
                        break;
                    case 370:
                        item.LineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                        break;
                    case 390:
                        item.PlotStylePointer = UIntHandle(pair.StringValue);
                        break;
                    case 347:
                        item.MaterialHandle = UIntHandle(pair.StringValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfLineType : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbLinetypeTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.LType; } }

        // properties
        public string Description { get; set; }
        public int AlignmentCode { get; set; }
        public int ElementCount { get; set; }
        public double TotalPatternLength { get; set; }
        public List<double> DashDotSpaceLengths { get; private set; }
        public List<short> ComplexLinetypeElementTypes { get; private set; }
        public List<short> ShapeNumbers { get; private set; }
        public List<string> StylePointers { get; private set; }
        public List<double> ScaleValues { get; private set; }
        public List<double> RotationAngles { get; private set; }
        public List<double> XOffsets { get; private set; }
        public List<double> YOffsets { get; private set; }
        public List<string> TextStrings { get; private set; }

        public DxfXData XData { get; set; }

        public DxfLineType()
            : base()
        {
            Description = null;
            AlignmentCode = (int)'A';
            ElementCount = 0;
            TotalPatternLength = 0.0;
            DashDotSpaceLengths = new List<double>();
            ComplexLinetypeElementTypes = new List<short>();
            ShapeNumbers = new List<short>();
            StylePointers = new List<string>();
            ScaleValues = new List<double>();
            RotationAngles = new List<double>();
            XOffsets = new List<double>();
            YOffsets = new List<double>();
            TextStrings = new List<string>();
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(3, (Description)));
            pairs.Add(new DxfCodePair(72, (short)(AlignmentCode)));
            pairs.Add(new DxfCodePair(73, (short)(ElementCount)));
            pairs.Add(new DxfCodePair(40, (TotalPatternLength)));
            pairs.AddRange(DashDotSpaceLengths.Select(value => new DxfCodePair(49, value)));
            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(ComplexLinetypeElementTypes.Select(value => new DxfCodePair(74, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(ShapeNumbers.Select(value => new DxfCodePair(75, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(StylePointers.Select(value => new DxfCodePair(340, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(ScaleValues.Select(value => new DxfCodePair(46, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(RotationAngles.Select(value => new DxfCodePair(50, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(XOffsets.Select(value => new DxfCodePair(44, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(YOffsets.Select(value => new DxfCodePair(45, value)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.AddRange(TextStrings.Select(value => new DxfCodePair(9, value)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfLineType FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfLineType();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 3:
                        item.Description = (pair.StringValue);
                        break;
                    case 72:
                        item.AlignmentCode = (pair.ShortValue);
                        break;
                    case 73:
                        item.ElementCount = (pair.ShortValue);
                        break;
                    case 40:
                        item.TotalPatternLength = (pair.DoubleValue);
                        break;
                    case 49:
                        item.DashDotSpaceLengths.Add((pair.DoubleValue));
                        break;
                    case 74:
                        item.ComplexLinetypeElementTypes.Add((pair.ShortValue));
                        break;
                    case 75:
                        item.ShapeNumbers.Add((pair.ShortValue));
                        break;
                    case 340:
                        item.StylePointers.Add((pair.StringValue));
                        break;
                    case 46:
                        item.ScaleValues.Add((pair.DoubleValue));
                        break;
                    case 50:
                        item.RotationAngles.Add((pair.DoubleValue));
                        break;
                    case 44:
                        item.XOffsets.Add((pair.DoubleValue));
                        break;
                    case 45:
                        item.YOffsets.Add((pair.DoubleValue));
                        break;
                    case 9:
                        item.TextStrings.Add((pair.StringValue));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfStyle : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbTextStyleTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.Style; } }

        // properties
        public double TextHeight { get; set; }
        public double WidthFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public int TextGenerationFlags { get; set; }
        public double LastHeightUsed { get; set; }
        public string PrimaryFontFileName { get; set; }
        public string BigFontFileName { get; set; }

        public DxfXData XData { get; set; }

        public DxfStyle()
            : base()
        {
            TextHeight = 0.0;
            WidthFactor = 1.0;
            ObliqueAngle = 0.0;
            TextGenerationFlags = 0;
            LastHeightUsed = 0.0;
            PrimaryFontFileName = null;
            BigFontFileName = null;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(40, (TextHeight)));
            pairs.Add(new DxfCodePair(41, (WidthFactor)));
            pairs.Add(new DxfCodePair(50, (ObliqueAngle)));
            pairs.Add(new DxfCodePair(71, (short)(TextGenerationFlags)));
            pairs.Add(new DxfCodePair(42, (LastHeightUsed)));
            pairs.Add(new DxfCodePair(3, (PrimaryFontFileName)));
            pairs.Add(new DxfCodePair(4, (BigFontFileName)));
            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfStyle FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfStyle();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 40:
                        item.TextHeight = (pair.DoubleValue);
                        break;
                    case 41:
                        item.WidthFactor = (pair.DoubleValue);
                        break;
                    case 50:
                        item.ObliqueAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.TextGenerationFlags = (int)(pair.ShortValue);
                        break;
                    case 42:
                        item.LastHeightUsed = (pair.DoubleValue);
                        break;
                    case 3:
                        item.PrimaryFontFileName = (pair.StringValue);
                        break;
                    case 4:
                        item.BigFontFileName = (pair.StringValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfUcs : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbUCSTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.Ucs; } }

        // properties
        public DxfPoint Origin { get; set; }
        public DxfVector XAxis { get; set; }
        public DxfVector YAxis { get; set; }
        public DxfOrthographicViewType OrthographicViewType { get; set; }
        public double Elevation { get; set; }
        public uint BaseUcsHandle { get; set; }
        public DxfOrthographicViewType OrthographicType { get; set; }
        public DxfPoint OrthographicOrigin { get; set; }

        public DxfXData XData { get; set; }

        public DxfUcs()
            : base()
        {
            Origin = DxfPoint.Origin;
            XAxis = DxfVector.XAxis;
            YAxis = DxfVector.XAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            Elevation = 0.0;
            BaseUcsHandle = 0u;
            OrthographicType = DxfOrthographicViewType.Top;
            OrthographicOrigin = DxfPoint.Origin;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(10, Origin?.X ?? 0.0));
            pairs.Add(new DxfCodePair(20, Origin?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(30, Origin?.Z ?? 0.0));
            pairs.Add(new DxfCodePair(11, XAxis?.X ?? 0.0));
            pairs.Add(new DxfCodePair(21, XAxis?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(31, XAxis?.Z ?? 0.0));
            pairs.Add(new DxfCodePair(12, YAxis?.X ?? 0.0));
            pairs.Add(new DxfCodePair(22, YAxis?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(32, YAxis?.Z ?? 0.0));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)(OrthographicViewType)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, (Elevation)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, UIntHandle(BaseUcsHandle)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(71, (short)(OrthographicType)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(13, OrthographicOrigin?.X ?? 0.0));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(23, OrthographicOrigin?.Y ?? 0.0));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(33, OrthographicOrigin?.Z ?? 0.0));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfUcs FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfUcs();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 10:
                        item.Origin.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.Origin.Y = (pair.DoubleValue);
                        break;
                    case 30:
                        item.Origin.Z = (pair.DoubleValue);
                        break;
                    case 11:
                        item.XAxis.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.XAxis.Y = (pair.DoubleValue);
                        break;
                    case 31:
                        item.XAxis.Z = (pair.DoubleValue);
                        break;
                    case 12:
                        item.YAxis.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.YAxis.Y = (pair.DoubleValue);
                        break;
                    case 32:
                        item.YAxis.Z = (pair.DoubleValue);
                        break;
                    case 79:
                        item.OrthographicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                        break;
                    case 146:
                        item.Elevation = (pair.DoubleValue);
                        break;
                    case 346:
                        item.BaseUcsHandle = UIntHandle(pair.StringValue);
                        break;
                    case 71:
                        item.OrthographicType = (DxfOrthographicViewType)(pair.ShortValue);
                        break;
                    case 13:
                        item.OrthographicOrigin.X = (pair.DoubleValue);
                        break;
                    case 23:
                        item.OrthographicOrigin.Y = (pair.DoubleValue);
                        break;
                    case 33:
                        item.OrthographicOrigin.Z = (pair.DoubleValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfView : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.View; } }

        // properties
        public double ViewHeight { get; set; }
        public DxfPoint ViewCenterPoint { get; set; }
        public double ViewWidth { get; set; }
        public DxfVector ViewDirection { get; set; }
        public DxfPoint TargetPoint { get; set; }
        public double LensLength { get; set; }
        public double FrontClippingPlane { get; set; }
        public double BackClippingPlane { get; set; }
        public double TwistAngle { get; set; }
        public short ViewMode { get; set; }
        public DxfViewRenderMode RenderMode { get; set; }
        public bool IsAssociatedUCSPresent { get; set; }
        public bool IsCameraPlottable { get; set; }
        public uint BackgroundObjectPointer { get; set; }
        public uint SelectionObjectPointer { get; set; }
        public uint VisualStyleObjectPointer { get; set; }
        public uint SunOwnershipPointer { get; set; }
        public DxfPoint UCSOrigin { get; set; }
        public DxfVector UCSXAxis { get; set; }
        public DxfVector UCSYAxis { get; set; }
        public DxfOrthographicViewType OrthographicViewType { get; set; }
        public double UCSElevation { get; set; }
        public uint UCSHandle { get; set; }
        public uint BaseUCSHandle { get; set; }

        public DxfXData XData { get; set; }

        public DxfView()
            : base()
        {
            ViewHeight = 1.0;
            ViewCenterPoint = DxfPoint.Origin;
            ViewWidth = 1.0;
            ViewDirection = DxfVector.ZAxis;
            TargetPoint = DxfPoint.Origin;
            LensLength = 1.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 1.0;
            TwistAngle = 0.0;
            ViewMode = 0;
            RenderMode = DxfViewRenderMode.Classic2D;
            IsAssociatedUCSPresent = false;
            IsCameraPlottable = false;
            BackgroundObjectPointer = 0u;
            SelectionObjectPointer = 0u;
            VisualStyleObjectPointer = 0u;
            SunOwnershipPointer = 0u;
            UCSOrigin = DxfPoint.Origin;
            UCSXAxis = DxfVector.XAxis;
            UCSYAxis = DxfVector.YAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            UCSElevation = 0.0;
            UCSHandle = 0u;
            BaseUCSHandle = 0u;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(40, (ViewHeight)));
            pairs.Add(new DxfCodePair(10, ViewCenterPoint?.X ?? 0.0));
            pairs.Add(new DxfCodePair(20, ViewCenterPoint?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(41, (ViewWidth)));
            pairs.Add(new DxfCodePair(11, ViewDirection?.X ?? 0.0));
            pairs.Add(new DxfCodePair(21, ViewDirection?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(31, ViewDirection?.Z ?? 0.0));
            pairs.Add(new DxfCodePair(12, TargetPoint?.X ?? 0.0));
            pairs.Add(new DxfCodePair(22, TargetPoint?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(32, TargetPoint?.Z ?? 0.0));
            pairs.Add(new DxfCodePair(42, (LensLength)));
            pairs.Add(new DxfCodePair(43, (FrontClippingPlane)));
            pairs.Add(new DxfCodePair(44, (BackClippingPlane)));
            pairs.Add(new DxfCodePair(50, (TwistAngle)));
            pairs.Add(new DxfCodePair(71, (ViewMode)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(281, (short)(RenderMode)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(72, BoolShort(IsAssociatedUCSPresent)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(73, BoolShort(IsCameraPlottable)));
            }

            if (BackgroundObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(332, UIntHandle(BackgroundObjectPointer)));
            }

            if (SelectionObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(334, UIntHandle(SelectionObjectPointer)));
            }

            if (VisualStyleObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(348, UIntHandle(VisualStyleObjectPointer)));
            }

            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(361, UIntHandle(SunOwnershipPointer)));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(110, UCSOrigin?.X ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(120, UCSOrigin?.Y ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(130, UCSOrigin?.Z ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(111, UCSXAxis?.X ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(121, UCSXAxis?.Y ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(131, UCSXAxis?.Z ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(112, UCSYAxis?.X ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(122, UCSYAxis?.Y ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(132, UCSYAxis?.Z ?? 0.0));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)(OrthographicViewType)));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, (UCSElevation)));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(345, UIntHandle(UCSHandle)));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, UIntHandle(BaseUCSHandle)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfView FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfView();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 40:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 10:
                        item.ViewCenterPoint.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.ViewCenterPoint.Y = (pair.DoubleValue);
                        break;
                    case 41:
                        item.ViewWidth = (pair.DoubleValue);
                        break;
                    case 11:
                        item.ViewDirection.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.ViewDirection.Y = (pair.DoubleValue);
                        break;
                    case 31:
                        item.ViewDirection.Z = (pair.DoubleValue);
                        break;
                    case 12:
                        item.TargetPoint.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.TargetPoint.Y = (pair.DoubleValue);
                        break;
                    case 32:
                        item.TargetPoint.Z = (pair.DoubleValue);
                        break;
                    case 42:
                        item.LensLength = (pair.DoubleValue);
                        break;
                    case 43:
                        item.FrontClippingPlane = (pair.DoubleValue);
                        break;
                    case 44:
                        item.BackClippingPlane = (pair.DoubleValue);
                        break;
                    case 50:
                        item.TwistAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.ViewMode = (pair.ShortValue);
                        break;
                    case 281:
                        item.RenderMode = (DxfViewRenderMode)(pair.ShortValue);
                        break;
                    case 72:
                        item.IsAssociatedUCSPresent = BoolShort(pair.ShortValue);
                        break;
                    case 73:
                        item.IsCameraPlottable = BoolShort(pair.ShortValue);
                        break;
                    case 332:
                        item.BackgroundObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 334:
                        item.SelectionObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 348:
                        item.VisualStyleObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 361:
                        item.SunOwnershipPointer = UIntHandle(pair.StringValue);
                        break;
                    case 110:
                        item.UCSOrigin.X = (pair.DoubleValue);
                        break;
                    case 120:
                        item.UCSOrigin.Y = (pair.DoubleValue);
                        break;
                    case 130:
                        item.UCSOrigin.Z = (pair.DoubleValue);
                        break;
                    case 111:
                        item.UCSXAxis.X = (pair.DoubleValue);
                        break;
                    case 121:
                        item.UCSXAxis.Y = (pair.DoubleValue);
                        break;
                    case 131:
                        item.UCSXAxis.Z = (pair.DoubleValue);
                        break;
                    case 112:
                        item.UCSYAxis.X = (pair.DoubleValue);
                        break;
                    case 122:
                        item.UCSYAxis.Y = (pair.DoubleValue);
                        break;
                    case 132:
                        item.UCSYAxis.Z = (pair.DoubleValue);
                        break;
                    case 79:
                        item.OrthographicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                        break;
                    case 146:
                        item.UCSElevation = (pair.DoubleValue);
                        break;
                    case 345:
                        item.UCSHandle = UIntHandle(pair.StringValue);
                        break;
                    case 346:
                        item.BaseUCSHandle = UIntHandle(pair.StringValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }

    public partial class DxfViewPort : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewportTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.ViewPort; } }

        // properties
        public DxfPoint LowerLeft { get; set; }
        public DxfPoint UpperRight { get; set; }
        public DxfPoint ViewCenter { get; set; }
        public DxfPoint SnapBasePoint { get; set; }
        public DxfVector SnapSpacing { get; set; }
        public DxfVector GridSpacing { get; set; }
        public DxfVector ViewDirection { get; set; }
        public DxfPoint TargetViewPoint { get; set; }
        public double ViewHeight { get; set; }
        public double ViewPortAspectRatio { get; set; }
        public double LensLength { get; set; }
        public double FrontClippingPlane { get; set; }
        public double BackClippingPlane { get; set; }
        public double SnapRotationAngle { get; set; }
        public double ViewTwistAngle { get; set; }
        public short Status { get; set; }
        public short ID { get; set; }
        public DxfViewMode ViewMode { get; set; }
        public int CircleZoomPercent { get; set; }
        public bool FastZoom { get; set; }
        public bool UCSIcon { get; set; }
        public bool SnapOn { get; set; }
        public bool GridOn { get; set; }
        public short SnapStyle { get; set; }
        public short SnapIsoPair { get; set; }
        public string PlotStyleSheet { get; set; }
        public DxfViewRenderMode RenderMode { get; set; }
        public bool HasOwnUCS { get; set; }
        public DxfPoint UCSOrigin { get; set; }
        public DxfVector UCSXAxis { get; set; }
        public DxfVector UCSYAxis { get; set; }
        public DxfOrthographicViewType OrthographicViewType { get; set; }
        public double UCSElevation { get; set; }
        public uint UCSHandle { get; set; }
        public uint BaseUCSHandle { get; set; }
        public DxfShadeEdgeMode ShadePlotSetting { get; set; }
        public bool MajorGridLines { get; set; }
        public uint BackgroundObjectPointer { get; set; }
        public uint ShadePlotObjectPointer { get; set; }
        public uint VisualStyleObjectPointer { get; set; }
        public bool IsDefaultLightingOn { get; set; }
        public DxfDefaultLightingType DefaultLightingType { get; set; }
        public double Brightness { get; set; }
        public double Contrast { get; set; }
        public DxfColor AmbientColor { get; set; }
        public int AmbientColorInt { get; set; }
        public string AmbientColorName { get; set; }

        public DxfXData XData { get; set; }

        public DxfViewPort()
            : base()
        {
            LowerLeft = DxfPoint.Origin;
            UpperRight = DxfPoint.Origin;
            ViewCenter = DxfPoint.Origin;
            SnapBasePoint = DxfPoint.Origin;
            SnapSpacing = DxfVector.Zero;
            GridSpacing = DxfVector.Zero;
            ViewDirection = DxfVector.ZAxis;
            TargetViewPoint = DxfPoint.Origin;
            ViewHeight = 0.0;
            ViewPortAspectRatio = 0.0;
            LensLength = 0.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 0.0;
            ViewHeight = 0.0;
            SnapRotationAngle = 0.0;
            ViewTwistAngle = 0.0;
            Status = 0;
            ID = 0;
            ViewMode = 0;
            CircleZoomPercent = 0;
            FastZoom = true;
            UCSIcon = false;
            SnapOn = false;
            GridOn = false;
            SnapStyle = 0;
            SnapIsoPair = 0;
            PlotStyleSheet = null;
            RenderMode = DxfViewRenderMode.Classic2D;
            HasOwnUCS = false;
            UCSOrigin = DxfPoint.Origin;
            UCSXAxis = DxfVector.XAxis;
            UCSYAxis = DxfVector.YAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            UCSElevation = 0.0;
            UCSHandle = 0u;
            BaseUCSHandle = 0u;
            ShadePlotSetting = DxfShadeEdgeMode.FacesShadedEdgeNotHighlighted;
            MajorGridLines = false;
            BackgroundObjectPointer = 0u;
            ShadePlotObjectPointer = 0u;
            VisualStyleObjectPointer = 0u;
            IsDefaultLightingOn = true;
            DefaultLightingType = DxfDefaultLightingType.OneDistantLight;
            Brightness = 0.0;
            Contrast = 0.0;
            AmbientColor = DxfColor.FromRawValue(7);
            AmbientColorInt = 0;
            AmbientColorName = "BLACK";
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(10, LowerLeft?.X ?? 0.0));
            pairs.Add(new DxfCodePair(20, LowerLeft?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(11, UpperRight?.X ?? 0.0));
            pairs.Add(new DxfCodePair(21, UpperRight?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(12, ViewCenter?.X ?? 0.0));
            pairs.Add(new DxfCodePair(22, ViewCenter?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(13, SnapBasePoint?.X ?? 0.0));
            pairs.Add(new DxfCodePair(23, SnapBasePoint?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(14, SnapSpacing?.X ?? 0.0));
            pairs.Add(new DxfCodePair(24, SnapSpacing?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(15, GridSpacing?.X ?? 0.0));
            pairs.Add(new DxfCodePair(25, GridSpacing?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(16, ViewDirection?.X ?? 0.0));
            pairs.Add(new DxfCodePair(26, ViewDirection?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(36, ViewDirection?.Z ?? 0.0));
            pairs.Add(new DxfCodePair(17, TargetViewPoint?.X ?? 0.0));
            pairs.Add(new DxfCodePair(27, TargetViewPoint?.Y ?? 0.0));
            pairs.Add(new DxfCodePair(37, TargetViewPoint?.Z ?? 0.0));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(40, (ViewHeight)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(41, (ViewPortAspectRatio)));
            }

            pairs.Add(new DxfCodePair(42, (LensLength)));
            pairs.Add(new DxfCodePair(43, (FrontClippingPlane)));
            pairs.Add(new DxfCodePair(44, (BackClippingPlane)));
            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(45, (ViewHeight)));
            }

            pairs.Add(new DxfCodePair(50, (SnapRotationAngle)));
            pairs.Add(new DxfCodePair(51, (ViewTwistAngle)));
            if (version == DxfAcadVersion.R12)
            {
                pairs.Add(new DxfCodePair(68, (Status)));
            }

            if (version == DxfAcadVersion.R12)
            {
                pairs.Add(new DxfCodePair(69, (ID)));
            }

            pairs.Add(new DxfCodePair(71, (short)(ViewMode)));
            pairs.Add(new DxfCodePair(72, (short)(CircleZoomPercent)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(73, BoolShort(FastZoom)));
            }

            pairs.Add(new DxfCodePair(74, BoolShort(UCSIcon)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(75, BoolShort(SnapOn)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(76, BoolShort(GridOn)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(77, (SnapStyle)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(78, (SnapIsoPair)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(1, (PlotStyleSheet)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(281, (short)(RenderMode)));
            }

            if (version >= DxfAcadVersion.R2000 && version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(65, BoolShort(HasOwnUCS)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(110, UCSOrigin?.X ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(120, UCSOrigin?.Y ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(130, UCSOrigin?.Z ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(111, UCSXAxis?.X ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(121, UCSXAxis?.Y ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(131, UCSXAxis?.Z ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(112, UCSYAxis?.X ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(122, UCSYAxis?.Y ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(132, UCSYAxis?.Z ?? 0.0));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)(OrthographicViewType)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, (UCSElevation)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(345, UIntHandle(UCSHandle)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, UIntHandle(BaseUCSHandle)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(170, (short)(ShadePlotSetting)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(61, BoolShort(MajorGridLines)));
            }

            if (BackgroundObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(332, UIntHandle(BackgroundObjectPointer)));
            }

            if (ShadePlotObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(333, UIntHandle(ShadePlotObjectPointer)));
            }

            if (VisualStyleObjectPointer != 0u && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(348, UIntHandle(VisualStyleObjectPointer)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(292, (IsDefaultLightingOn)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(282, (short)(DefaultLightingType)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(141, (Brightness)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(142, (Contrast)));
            }

            if (AmbientColor?.RawValue != 7 && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(62, DxfColor.GetRawValue(AmbientColor)));
            }

            if (AmbientColorInt != 0 && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(421, (AmbientColorInt)));
            }

            if (AmbientColorName != "BLACK" && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(431, (AmbientColorName)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfViewPort FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfViewPort();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 10:
                        item.LowerLeft.X = (pair.DoubleValue);
                        break;
                    case 20:
                        item.LowerLeft.Y = (pair.DoubleValue);
                        break;
                    case 11:
                        item.UpperRight.X = (pair.DoubleValue);
                        break;
                    case 21:
                        item.UpperRight.Y = (pair.DoubleValue);
                        break;
                    case 12:
                        item.ViewCenter.X = (pair.DoubleValue);
                        break;
                    case 22:
                        item.ViewCenter.Y = (pair.DoubleValue);
                        break;
                    case 13:
                        item.SnapBasePoint.X = (pair.DoubleValue);
                        break;
                    case 23:
                        item.SnapBasePoint.Y = (pair.DoubleValue);
                        break;
                    case 14:
                        item.SnapSpacing.X = (pair.DoubleValue);
                        break;
                    case 24:
                        item.SnapSpacing.Y = (pair.DoubleValue);
                        break;
                    case 15:
                        item.GridSpacing.X = (pair.DoubleValue);
                        break;
                    case 25:
                        item.GridSpacing.Y = (pair.DoubleValue);
                        break;
                    case 16:
                        item.ViewDirection.X = (pair.DoubleValue);
                        break;
                    case 26:
                        item.ViewDirection.Y = (pair.DoubleValue);
                        break;
                    case 36:
                        item.ViewDirection.Z = (pair.DoubleValue);
                        break;
                    case 17:
                        item.TargetViewPoint.X = (pair.DoubleValue);
                        break;
                    case 27:
                        item.TargetViewPoint.Y = (pair.DoubleValue);
                        break;
                    case 37:
                        item.TargetViewPoint.Z = (pair.DoubleValue);
                        break;
                    case 40:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 41:
                        item.ViewPortAspectRatio = (pair.DoubleValue);
                        break;
                    case 42:
                        item.LensLength = (pair.DoubleValue);
                        break;
                    case 43:
                        item.FrontClippingPlane = (pair.DoubleValue);
                        break;
                    case 44:
                        item.BackClippingPlane = (pair.DoubleValue);
                        break;
                    case 45:
                        item.ViewHeight = (pair.DoubleValue);
                        break;
                    case 50:
                        item.SnapRotationAngle = (pair.DoubleValue);
                        break;
                    case 51:
                        item.ViewTwistAngle = (pair.DoubleValue);
                        break;
                    case 68:
                        item.Status = (pair.ShortValue);
                        break;
                    case 69:
                        item.ID = (pair.ShortValue);
                        break;
                    case 71:
                        item.ViewMode = (DxfViewMode)(pair.ShortValue);
                        break;
                    case 72:
                        item.CircleZoomPercent = (int)(pair.ShortValue);
                        break;
                    case 73:
                        item.FastZoom = BoolShort(pair.ShortValue);
                        break;
                    case 74:
                        item.UCSIcon = BoolShort(pair.ShortValue);
                        break;
                    case 75:
                        item.SnapOn = BoolShort(pair.ShortValue);
                        break;
                    case 76:
                        item.GridOn = BoolShort(pair.ShortValue);
                        break;
                    case 77:
                        item.SnapStyle = (pair.ShortValue);
                        break;
                    case 78:
                        item.SnapIsoPair = (pair.ShortValue);
                        break;
                    case 1:
                        item.PlotStyleSheet = (pair.StringValue);
                        break;
                    case 281:
                        item.RenderMode = (DxfViewRenderMode)(pair.ShortValue);
                        break;
                    case 65:
                        item.HasOwnUCS = BoolShort(pair.ShortValue);
                        break;
                    case 110:
                        item.UCSOrigin.X = (pair.DoubleValue);
                        break;
                    case 120:
                        item.UCSOrigin.Y = (pair.DoubleValue);
                        break;
                    case 130:
                        item.UCSOrigin.Z = (pair.DoubleValue);
                        break;
                    case 111:
                        item.UCSXAxis.X = (pair.DoubleValue);
                        break;
                    case 121:
                        item.UCSXAxis.Y = (pair.DoubleValue);
                        break;
                    case 131:
                        item.UCSXAxis.Z = (pair.DoubleValue);
                        break;
                    case 112:
                        item.UCSYAxis.X = (pair.DoubleValue);
                        break;
                    case 122:
                        item.UCSYAxis.Y = (pair.DoubleValue);
                        break;
                    case 132:
                        item.UCSYAxis.Z = (pair.DoubleValue);
                        break;
                    case 79:
                        item.OrthographicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                        break;
                    case 146:
                        item.UCSElevation = (pair.DoubleValue);
                        break;
                    case 345:
                        item.UCSHandle = UIntHandle(pair.StringValue);
                        break;
                    case 346:
                        item.BaseUCSHandle = UIntHandle(pair.StringValue);
                        break;
                    case 170:
                        item.ShadePlotSetting = (DxfShadeEdgeMode)(pair.ShortValue);
                        break;
                    case 61:
                        item.MajorGridLines = BoolShort(pair.ShortValue);
                        break;
                    case 332:
                        item.BackgroundObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 333:
                        item.ShadePlotObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 348:
                        item.VisualStyleObjectPointer = UIntHandle(pair.StringValue);
                        break;
                    case 292:
                        item.IsDefaultLightingOn = (pair.BoolValue);
                        break;
                    case 282:
                        item.DefaultLightingType = (DxfDefaultLightingType)(pair.ShortValue);
                        break;
                    case 141:
                        item.Brightness = (pair.DoubleValue);
                        break;
                    case 142:
                        item.Contrast = (pair.DoubleValue);
                        break;
                    case 62:
                        item.AmbientColor = DxfColor.FromRawValue(pair.ShortValue);
                        break;
                    case 421:
                        item.AmbientColorInt = (pair.IntegerValue);
                        break;
                    case 431:
                        item.AmbientColorName = (pair.StringValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }
}
// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// This line is required for T4 template generation to work. 
// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// This line is required for T4 template generation to work. 

